{"version":3,"sources":["Game.jsx","GameSelect.jsx","GameOver.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Game","_ref","title","images","onImageSelect","score","highScore","rows","column","map","image","i","push","react_default","a","createElement","Card_default","className","Header","Badge_default","variant","pill","Body","row","key","Row_default","concat","Col_default","Button_default","onClick","e","Image_default","src","thumbnail","width","height","GameSelect","games","onGameSelect","ButtonGroup_default","_ref2","logo","GameOver","max","show","onClose","Modal_default","onHide","closeButton","Title","align","lib_default","Footer","_","data","randomize","list","orig","Object","toConsumableArray","random","length","splice","Math","floor","pop","App","state","game","gameOver","keys","selected","_this2","this","db","window","firebase","database","highscore","ref","on","snap","setState","val","_this3","_this$state","Fragment","Container_default","includes","set","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27602420.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\n\nexport default function({ title, images, onImageSelect, score, highScore }) {\n  const rows = [];\n  let column = [];\n\n  images.map(\n    (image, i) =>\n      column.push(image) &&\n      ((i + 1) % 4 === 0 && rows.push(column) && (column = []))\n  );\n\n  return (\n    <Card className=\"vh-100\">\n      <Card.Header className=\"text-dark\">\n        <h1>{title}</h1>\n        <div className=\"d-flex justify-content-around\">\n          <h3>\n            <Badge variant=\"info\">\n              Score{\" \"}\n              <Badge pill variant=\"light\">\n                {score}\n              </Badge>\n            </Badge>\n          </h3>\n          <h3>\n            <Badge variant=\"info\">\n              High Score{\" \"}\n              <Badge pill variant=\"light\">\n                {highScore}\n              </Badge>\n            </Badge>\n          </h3>\n        </div>\n      </Card.Header>\n      <Card.Body className=\"d-flex justify-content-center flex-wrap align-items-center\">\n        {rows.map((row, key) => (\n          <Row key={`row-${key}`} className=\"mb-2\">\n            {row.map((image, key) => (\n              <Col key={`col-${key}`}>\n                <Button\n                  variant=\"outline-dark\"\n                  onClick={e => onImageSelect && onImageSelect(image)}\n                >\n                  <Image src={image} thumbnail width={240} height={320} />\n                </Button>\n              </Col>\n            ))}\n          </Row>\n        ))}\n      </Card.Body>\n    </Card>\n  );\n}\n","import React from \"react\";\n\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Image from \"react-bootstrap/Image\";\n\nexport default function({ games, onGameSelect }) {\n  return (\n    <div className=\"d-flex flex-column justify-content-center vh-100 align-items-center\">\n      <h1>Pick a Game</h1>\n      <ButtonGroup>\n        {games &&\n          games.map(({ key, title, logo }) => (\n            <Button\n              key={key}\n              variant=\"outline-dark\"\n              onClick={e => onGameSelect && onGameSelect({ key, title })}\n            >\n              {title}\n              <Image src={logo} thumbnail />\n            </Button>\n          ))}\n      </ButtonGroup>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Emoji from \"@stej/emoji\";\n\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default function({ score, max, show, onClose }) {\n  return (\n    <Modal show={show} onHide={onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Game Over</Modal.Title>\n      </Modal.Header>\n      <Modal.Body align=\"center\">\n        {score === max ? (\n          <div>\n            <p>\n              <Emoji>{\"🦄😀🥳🎆🎉🕺🏼\"}</Emoji>\n            </p>\n            <p className=\"font-weight-bold\">\n              Yeah!! You clicked all of the images only once!\n            </p>\n          </div>\n        ) : (\n          <div>\n            <p>\n              <Emoji>{\"😦😢🤦🏼‍♂️🙁😞\"}</Emoji>\n            </p>\n            <p className=\"font-weight-bold\">\n              {score} image\n              {score > 1 ? \"s were \" : \" was \"}\n              clicked only once.\n            </p>\n          </div>\n        )}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={onClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import * as _ from \"lodash\";\nimport React from \"react\";\n\nimport Container from \"react-bootstrap/Container\";\n\nimport Game from \"./Game\";\nimport GameSelect from \"./GameSelect\";\nimport GameOver from \"./GameOver\";\n\nimport data from \"./data.json\";\nimport images from \"./images.json\";\n\nimport \"./App.css\";\n\n_.merge(data, images);\n\nconst randomize = list => {\n  const orig = [...list];\n  const random = [];\n\n  while (orig.length > 0) {\n    random.push(orig.splice(Math.floor(Math.random() * orig.length), 1).pop());\n  }\n\n  return random;\n};\n\nclass App extends React.Component {\n  state = {\n    game: \"\",\n    gameOver: false,\n    games: Object.keys(data).map(key => ({\n      key,\n      title: data[key].title,\n      logo: data[key].logo\n    })),\n    title: \"\",\n    images: [],\n    selected: [],\n    highScore: 0\n  };\n\n  componentDidMount() {\n    this.db = window.firebase.database();\n    this.highscore = this.db.ref(\"highscore\");\n\n    this.highscore.on(\"value\", snap => {\n      this.setState({ highScore: snap.val() || 0 });\n    });\n  }\n\n  render() {\n    const {\n      game,\n      games,\n      gameOver,\n      title,\n      images,\n      selected,\n      highScore\n    } = this.state;\n\n    return (\n      <>\n        <Container>\n          {game ? (\n            <Game\n              title={title}\n              images={randomize(images)}\n              onImageSelect={image => {\n                if (selected.includes(image)) {\n                  this.setState({\n                    gameOver: true\n                  });\n                } else {\n                  this.setState({\n                    selected: [...selected, image],\n                    gameOver: selected.length === images.length - 1\n                  });\n                }\n              }}\n              score={selected.length}\n              highScore={highScore}\n            />\n          ) : (\n            <GameSelect\n              games={games}\n              onGameSelect={game => {\n                this.setState({\n                  game: game.key,\n                  title: game.title,\n                  images: data[game.key].images\n                });\n              }}\n            />\n          )}\n        </Container>\n        <GameOver\n          score={selected.length}\n          max={images.length}\n          show={gameOver}\n          onClose={e => {\n            this.highscore.set(Math.max(highScore, selected.length));\n            this.setState({\n              gameOver: false,\n              highScore: Math.max(highScore, selected.length),\n              selected: []\n            });\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}