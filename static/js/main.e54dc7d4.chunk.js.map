{"version":3,"sources":["Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Game","state","selected","_this$props","this","props","title","images","console","log","react_default","a","createElement","Fragment","Card_default","Header","className","Body","map","image","key","Image_default","src","thumbnail","width","height","React","Component","SelectGame","ButtonGroup_default","Object","keys","data","react_router_dom","to","Button_default","variant","logo","fluid","NoMatch","_","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","version","Container_default","react_router","path","exact","component","render","src_Game","assign","game","match","params","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"85HAyCeA,6MAhCbC,MAAQ,CAAEC,SAAU,4EAEX,IAAAC,EACmBC,KAAKC,MAAvBC,EADDH,EACCG,MAAOC,EADRJ,EACQI,OAIf,OAFAC,QAAQC,IAAI,CAAEJ,MAAOD,KAAKC,QAGxBK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KACED,EAAAC,EAAAC,cAACE,EAAAH,EAAKI,OAAN,CAAaC,UAAU,aACrBN,EAAAC,EAAAC,cAAA,UAAKN,IAEPI,EAAAC,EAAAC,cAACE,EAAAH,EAAKM,KAAN,CAAWD,UAAU,8DAClBT,GACCA,EAAOW,IAAI,SAACC,EAAOC,GAAR,OACTV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACES,IAAKA,EACLE,IAAKH,EACLI,WAAS,EACTC,MAAO,IACPC,OAAQ,IACRT,UAAU,oBAvBTU,IAAMC,iCCUzB,SAASC,IACP,OACElB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,uEACbN,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,KACGmB,OAAOC,KAAKC,GAAMd,IAAI,SAAAE,GAAG,OACxBV,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMb,IAAKA,EAAKc,GAAId,GAClBV,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAQyB,QAAQ,gBACbJ,EAAKZ,GAAKd,MACXI,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAOW,IAAKU,EAAKZ,GAAKiB,KAAMC,OAAK,UAS/C,SAASC,IACP,OAAO7B,EAAAC,EAAAC,cAAA,4BArBT4B,QAAQR,EAAMzB,OAyDCkC,cAhCb,SAAAA,EAAYpC,GAAO,IAAAqC,EAAA,OAAAZ,OAAAa,EAAA,EAAAb,CAAA1B,KAAAqC,IACjBC,EAAAZ,OAAAc,EAAA,EAAAd,CAAA1B,KAAA0B,OAAAe,EAAA,EAAAf,CAAAW,GAAAK,KAAA1C,KAAMC,KAEDJ,MAAQ,CACX8C,QAAS,IAJML,wEASjB,OACEhC,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACEvC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxB,IACjClB,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CACEC,KAAK,SACLC,OAAK,EACLE,OAAQ,SAAAhD,GAAK,OACXK,EAAAC,EAAAC,cAAC0C,EAADxB,OAAAyB,OAAA,CACEC,KAAMnD,EAAMoD,MAAMC,OAAOF,MACrBxB,EAAK3B,EAAMoD,MAAMC,OAAOF,WAIlC9C,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOG,UAAWb,cAzBZb,IAAMC,WC5BJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCXNM,IAASV,OAAO3C,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e54dc7d4.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Card from \"react-bootstrap/Card\";\n// import Row from \"react-bootstrap/Row\";\n// import Col from \"react-bootstrap/Col\";\n// import ListGroup from \"react-bootstrap/ListGroup\";\nimport Image from \"react-bootstrap/Image\";\n\nclass Game extends React.Component {\n  state = { selected: [] };\n\n  render() {\n    const { title, images } = this.props;\n\n    console.log({ props: this.props });\n\n    return (\n      <>\n        <Card>\n          <Card.Header className=\"text-dark\">\n            <h1>{title}</h1>\n          </Card.Header>\n          <Card.Body className=\"d-flex justify-content-center flex-wrap align-items-center\">\n            {images &&\n              images.map((image, key) => (\n                <Image\n                  key={key}\n                  src={image}\n                  thumbnail\n                  width={240}\n                  height={320}\n                  className=\"m-3\"\n                />\n              ))}\n          </Card.Body>\n        </Card>\n      </>\n    );\n  }\n}\n\nexport default Game;\n","import * as _ from \"lodash\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\n\nimport Container from \"react-bootstrap/Container\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Image from \"react-bootstrap/Image\";\n\nimport Game from \"./Game\";\n\nimport data from \"./data.json\";\nimport images from \"./images.json\";\n\nimport \"./App.css\";\n\n_.merge(data, images);\n\nfunction SelectGame() {\n  return (\n    <div className=\"d-flex flex-column justify-content-center vh-100 align-items-center\">\n      <p>Pick a Version</p>\n      <ButtonGroup>\n        {Object.keys(data).map(key => (\n          <Link key={key} to={key}>\n            <Button variant=\"outline-dark\">\n              {data[key].title}\n              <Image src={data[key].logo} fluid />\n            </Button>\n          </Link>\n        ))}\n      </ButtonGroup>\n    </div>\n  );\n}\n\nfunction NoMatch() {\n  return <div>404 Not Found</div>;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      version: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <Router>\n        <Container>\n          <Switch>\n            <Route path=\"/\" exact component={SelectGame} />\n            <Route\n              path=\"/:game\"\n              exact\n              render={props => (\n                <Game\n                  game={props.match.params.game}\n                  {...data[props.match.params.game]}\n                />\n              )}\n            />\n            <Route component={NoMatch} />\n          </Switch>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}